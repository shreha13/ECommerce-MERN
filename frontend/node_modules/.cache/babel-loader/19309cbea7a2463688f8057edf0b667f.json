{"ast":null,"code":"import axios from \"axios\";\nimport { CREATE_ORDER_FAIL, CREATE_ORDER_LOAD, CREATE_ORDER_SUCCESS, GET_ALL_ORDERS_FAIL, GET_ORDERS_FAIL, GET_ORDERS_SUCCESS, GET_ORDER_FAIL, GET_ORDER_SUCCESS, PAY_ORDERS_FAIL, PAY_ORDER_SUCCESS } from \"./types\";\nexport const createOrder = orderData => {\n  return async (dispatch, getState) => {\n    dispatch({\n      type: CREATE_ORDER_LOAD\n    });\n    const token = getState().auth.user.token;\n\n    try {\n      const {\n        data\n      } = await axios.post(\"/api/orders\", orderData, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-auth-header\": `Bearer ${token}`\n        }\n      });\n      dispatch({\n        type: CREATE_ORDER_SUCCESS,\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: CREATE_ORDER_FAIL,\n        payload: error.response ? error.response.data.message : error.message\n      });\n    }\n  };\n};\nexport const getOrders = () => {\n  return async (dispatch, getState) => {\n    dispatch({\n      type: CREATE_ORDER_LOAD\n    });\n    const token = getState().auth.user.token;\n\n    try {\n      const {\n        data\n      } = await axios.get(\"/api/orders\", {\n        headers: {\n          \"x-auth-header\": `Bearer ${token}`\n        }\n      });\n      dispatch({\n        type: GET_ORDERS_SUCCESS,\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_ORDERS_FAIL,\n        payload: error.response ? error.response.data.message : error.message\n      });\n    }\n  };\n};\nexport const getOrderById = id => {\n  return async (dispatch, getState) => {\n    dispatch({\n      type: CREATE_ORDER_LOAD\n    });\n    const token = getState().auth.user.token;\n\n    try {\n      const {\n        data\n      } = await axios.get(\"/api/orders/\" + id, {\n        headers: {\n          \"x-auth-header\": `Bearer ${token}`\n        }\n      });\n      dispatch({\n        type: GET_ORDER_SUCCESS,\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_ORDER_FAIL,\n        payload: error.response ? error.response.data.message : error.message\n      });\n    }\n  };\n};\nexport const payOrder = (id, paymentResult) => {\n  return async (dispatch, getState) => {\n    dispatch({\n      type: CREATE_ORDER_LOAD\n    });\n    const token = getState().auth.user.token;\n\n    try {\n      const {\n        data\n      } = await axios.put(\"/api/orders/\" + id + \"/pay\", paymentResult, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-auth-header\": `Bearer ${token}`\n        }\n      });\n      dispatch({\n        type: PAY_ORDER_SUCCESS,\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: PAY_ORDERS_FAIL,\n        payload: error.response ? error.response.data.message : error.message\n      });\n    }\n  };\n};\nexport const getAllOrders = () => async (dispatch, getState) => {\n  const auth = getState().auth;\n\n  try {\n    const token = auth.user.token;\n    const {\n      data\n    } = await axios.get();\n  } catch (error) {\n    dispatch({\n      type: GET_ALL_ORDERS_FAIL,\n      payload: error.response ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["D:/GitHub/ECommerce-MERN/frontend/src/actions/order.js"],"names":["axios","CREATE_ORDER_FAIL","CREATE_ORDER_LOAD","CREATE_ORDER_SUCCESS","GET_ALL_ORDERS_FAIL","GET_ORDERS_FAIL","GET_ORDERS_SUCCESS","GET_ORDER_FAIL","GET_ORDER_SUCCESS","PAY_ORDERS_FAIL","PAY_ORDER_SUCCESS","createOrder","orderData","dispatch","getState","type","token","auth","user","data","post","headers","payload","error","response","message","getOrders","get","getOrderById","id","payOrder","paymentResult","put","getAllOrders"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport {\r\n  CREATE_ORDER_FAIL,\r\n  CREATE_ORDER_LOAD,\r\n  CREATE_ORDER_SUCCESS,\r\n  GET_ALL_ORDERS_FAIL,\r\n  GET_ORDERS_FAIL,\r\n  GET_ORDERS_SUCCESS,\r\n  GET_ORDER_FAIL,\r\n  GET_ORDER_SUCCESS,\r\n  PAY_ORDERS_FAIL,\r\n  PAY_ORDER_SUCCESS,\r\n} from \"./types\";\r\n\r\nexport const createOrder = (orderData) => {\r\n  return async (dispatch, getState) => {\r\n    dispatch({\r\n      type: CREATE_ORDER_LOAD,\r\n    });\r\n\r\n    const token = getState().auth.user.token;\r\n\r\n    try {\r\n      const { data } = await axios.post(\"/api/orders\", orderData, {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"x-auth-header\": `Bearer ${token}`,\r\n        },\r\n      });\r\n\r\n      dispatch({\r\n        type: CREATE_ORDER_SUCCESS,\r\n        payload: data,\r\n      });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: CREATE_ORDER_FAIL,\r\n        payload: error.response ? error.response.data.message : error.message,\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const getOrders = () => {\r\n  return async (dispatch, getState) => {\r\n    dispatch({\r\n      type: CREATE_ORDER_LOAD,\r\n    });\r\n\r\n    const token = getState().auth.user.token;\r\n    try {\r\n      const { data } = await axios.get(\"/api/orders\", {\r\n        headers: {\r\n          \"x-auth-header\": `Bearer ${token}`,\r\n        },\r\n      });\r\n\r\n      dispatch({\r\n        type: GET_ORDERS_SUCCESS,\r\n        payload: data,\r\n      });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: GET_ORDERS_FAIL,\r\n        payload: error.response ? error.response.data.message : error.message,\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const getOrderById = (id) => {\r\n  return async (dispatch, getState) => {\r\n    dispatch({\r\n      type: CREATE_ORDER_LOAD,\r\n    });\r\n\r\n    const token = getState().auth.user.token;\r\n\r\n    try {\r\n      const { data } = await axios.get(\"/api/orders/\" + id, {\r\n        headers: {\r\n          \"x-auth-header\": `Bearer ${token}`,\r\n        },\r\n      });\r\n\r\n      dispatch({\r\n        type: GET_ORDER_SUCCESS,\r\n        payload: data,\r\n      });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: GET_ORDER_FAIL,\r\n        payload: error.response ? error.response.data.message : error.message,\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const payOrder = (id, paymentResult) => {\r\n  return async (dispatch, getState) => {\r\n    dispatch({\r\n      type: CREATE_ORDER_LOAD,\r\n    });\r\n\r\n    const token = getState().auth.user.token;\r\n\r\n    try {\r\n      const { data } = await axios.put(\r\n        \"/api/orders/\" + id + \"/pay\",\r\n        paymentResult,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"x-auth-header\": `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n\r\n      dispatch({\r\n        type: PAY_ORDER_SUCCESS,\r\n        payload: data,\r\n      });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: PAY_ORDERS_FAIL,\r\n        payload: error.response ? error.response.data.message : error.message,\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const getAllOrders = () => async (dispatch, getState) => {\r\n  const auth = getState().auth;\r\n  try {\r\n    const token = auth.user.token;\r\n\r\n    const {data} = await axios.get()\r\n  } catch (error) {\r\n    dispatch({\r\n      type: GET_ALL_ORDERS_FAIL,\r\n      payload: error.response ? error.response.data.message : error.message,\r\n    });\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}